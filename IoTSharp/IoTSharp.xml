<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IoTSharp</name>
    </assembly>
    <members>
        <member name="T:IoTSharp.Extensions.RpcClient">
            <summary>
            https://github.com/chkr1011/MQTTnet/blob/master/Source/MQTTnet.Extensions.Rpc/MqttRpcClient.cs
            </summary>
        </member>
        <member name="T:IoTSharp.Controllers.AccountController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.MyInfo">
            <summary>
            获取当前登录用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Login(IoTSharp.Dtos.LoginDto)">
            <summary>
            登录用户
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.CreateToken(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.RefreshToken(IoTSharp.Dtos.RefreshTokenDto)">
            <summary>
            刷新JWT Token
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Logout">
            <summary>
            退出账号
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Register(IoTSharp.Dtos.RegisterDto)">
            <summary>
            注册用户
            </summary>
            <param name="model"></param>
            <returns >返回登录结果</returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Create(IoTSharp.Dtos.InstallDto)">
            <summary>
            注册新的租户，客户，以及用户
            </summary>
            <param name="model"></param>
            <returns >返回登录结果</returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.All(System.Guid)">
            <summary>
            返回客户所属用户列表
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Get(System.String)">
            <summary>
            返回用户信息
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Modify(IoTSharp.Dtos.UserItemDto)">
            <summary>
            修改用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.ModifyMyInfo(IoTSharp.Dtos.UserItemDto)">
            <summary>
            修改当前用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.ModifyMyPassword(IoTSharp.Dtos.UserPassword)">
            <summary>
            修改当前用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.AlarmController">
            <summary>
            告警管理
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.AlarmController.Occurred(IoTSharp.Contracts.CreateAlarmDto)">
            <summary>
            创建告警， 但不触发规则链。要触发规则链， 请使用设备相关的API
            </summary>
            <param name="dto">告警内容</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AlarmController.List(IoTSharp.Controllers.Models.AlarmParam)">
            <summary>
            查询告警信息
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AlarmController.Originators(IoTSharp.Models.ModelOriginatorSearch)">
            <summary>
            搜索告警发起对象
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AlarmController.AckAlarm(IoTSharp.Contracts.AlarmStatusDto)">
            <summary>
            确认告警
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AlarmController.ClearAlarm(IoTSharp.Contracts.AlarmStatusDto)">
            <summary>
            清除告警信息
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.AuthorizedKeysController">
            <summary>
            全局设备认证KEY管理
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.AuthorizedKeysController.GetAuthorizedKeys">
            <summary>
            获取当前已登录用户所属客户的全局认证KEY
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AuthorizedKeysController.GetAuthorizedKey(System.Guid)">
            <summary>
            根据ID获取KEY
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.CaptchaController">
            <summary>
            登录验证码
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.CaptchaController.Index(System.String)">
            <summary>
            生成一个图形认证
            </summary>
            <param name="clientid"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CaptchaController.Vertify(System.String,IoTSharp.Models.ModelCaptchaVertify)">
            <summary>
            校验图形认证
            </summary>
            <param name="clientid"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.CustomersController">
            <summary>
            客户管理
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.GetAllCustomers(System.Guid)">
            <summary>
            获取指定租户下的所有客户
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.GetCustomers(IoTSharp.Controllers.Models.CustomerParam)">
            <summary>
            获取指定租户下的所有客户
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.GetCustomer(System.Guid)">
            <summary>
            返回指定id的客户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.PutCustomer(System.Guid,IoTSharp.Dtos.CustomerDto)">
            <summary>
            修改指定租户为 指定的信息
            </summary>
            <param name="id"></param>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.PostCustomer(IoTSharp.Dtos.CustomerDto)">
            <summary>
            为当前客户所在的租户新增客户
            </summary>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.DeleteCustomer(System.Guid)">
            <summary>
            删除指定的客户ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.DeviceModelController">
            <summary>
            设备模型
            </summary>
        </member>
        <member name="T:IoTSharp.Controllers.DevicesController">
            <summary>
            设备管理
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAllDevices(System.Guid)">
            <summary>
            获取指定客户的设备列表
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetDevices(IoTSharp.Controllers.Models.DeviceParam)">
            <summary>
            获取指定客户的设备列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetIdentity(System.Guid)">
            <summary>
            获取指定设备的认证方式信息
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.CreateX509Identity(System.Guid)">
            <summary>
            获取指定设备的认证方式信息
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.DownloadCertificates(System.Guid)">
            <summary>
            下载证书
            </summary>
            <param name="deviceId"></param>
            <returns>一个压缩包，包含ca.crt client.crt client.key</returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAttributeLatest(System.Guid)">
             <summary>
            获取指定设备的最新属性
             </summary>
             <param name="deviceId"></param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAttributeLatestByKeyNameAndDeviceId(IoTSharp.Dtos.AttributeLatestByKeyNameAndDeviceIdDto)">
             <summary>
            获取指定Key和设备Id列表的最新属性
             </summary>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAttributeLatest(System.Guid,System.String)">
            <summary>
            获取指定设备指定keys的最新属性
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or  ; to split </param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryLatest(System.Guid)">
             <summary>
            获取指定设备的最新遥测数据
             </summary>
             <param name="deviceId"></param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryLatest(System.Guid,System.String)">
            <summary>
            获取指定设备的指定key 的遥测数据
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">指定键值列表， 使用分号或者逗号分割 。 </param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryData(System.Guid,System.String,System.DateTime)">
            <summary>
            获取指定设备和指定时间， 指定key的数据
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or  ; to split </param>
            <param name="begin">开始以时间， 比如 2019-06-06 12:24</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryData(System.Guid,System.String,System.DateTime,System.DateTime)">
            <summary>
            返回指定设备的的遥测数据， 按照keyname 和指定时间范围获取，如果keyname 为 all  , 则返回全部key 的数据
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or  ; to split </param>
            <param name="begin">For example: 2019-06-06 12:24</param>
            <param name="end">For example: 2019-06-06 12:24</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryData(System.Guid,IoTSharp.Dtos.TelemetryDataQueryDto)">
             <summary>
             返回指定设备的的遥测数据， 按照keyname 和指定时间范围获取，如果keyname 为 all  , 则返回全部key 的数据
             </summary>
             <param name="deviceId">指定设备ID</param>
             <param name="queryDto">查询条件例子:
            {
             "keys": "",
             "begin": "2022-03-23T11:44:56.488Z",
             "every": "1.03:14:56:166",
             "aggregate": "Mean"
             }
             </param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetDevice(System.Guid)">
            <summary>
            获取设备详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PutDevice(System.Guid,IoTSharp.Dtos.DevicePutDto)">
            <summary>
            修改设备
            </summary>
            <param name="id"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PostDevice(IoTSharp.Dtos.DevicePostDto)">
            <summary>
            创建设备， 客户ID和租户ID均为当前登录用户所属
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.DeleteDevice(System.Guid)">
            <summary>
            删除设备
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Rpc(System.String,System.String,System.Int32,System.Object)">
            <summary>
            远程控制指定设备， 此方法通过给远程设备发送mqtt消息进行控制，设备在收到信息后回复结果，此方法才算调用结束
            </summary>
            <param name="access_token"></param>
            <param name="method"></param>
            <param name="timeout"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Telemetry(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            HTTP方式上传遥测数据
            </summary>
            <param name="access_token">Device 's access token</param>
            <param name="telemetrys"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Attributes(System.String,IoTSharp.Contracts.DataSide,System.String)">
             <summary>
             获取服务测的设备熟悉
             </summary>
             <param name="access_token">Device 's access token </param>
            <param name="dataSide">Specifying data side.</param>
            <param name="keys">Specifying Attribute's keys</param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Attributes(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            上传客户侧属性数据
            </summary>
            <param name="access_token">Device 's access token </param>
            <param name="attributes">attributes</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Alarm(System.String,IoTSharp.Contracts.DeviceAlarmDto)">
            <summary>
            为网关的子设备或者普通设备上传告警信息
            </summary>
            <param name="access_token">token</param>
            <param name="alarm">警告内容</param>
            <returns></returns>
            <remarks>如果是网关设备，当OriginatorName为网关的名称或者ID时，则我们认为他是网关本身的警告，否则我们认为是设备的警告</remarks>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PushDataToMap(System.String,System.String)">
            <summary>
            Http方式调用RawDataGateway网关上传原始Json或者xml并通过规则链进行解析。
            </summary>
            <param name="access_token">Device 's access token </param>
            <param name="format"></param>
            <returns></returns>
            <remarks>需要在body里面填充数据</remarks>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PushDataToRuleChains(System.String,System.String)">
            <summary>
            上传原始Json或者xml 通过规则链进行解析。
            </summary>
            <param name="access_token">Device 's access token </param>
            <param name="format">只支持json和 xml， XML会转换为 Json。</param>
            <returns></returns>
            <remarks>需要在body里面填充数据</remarks>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.AddAttribute(System.String,IoTSharp.Controllers.DeviceAttributeDto)">
            <summary>
            服务侧新增属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.EditAttribute(System.Guid,IoTSharp.Dtos.DeviceAttrEditDto)">
            <summary>
            服务侧和任意侧属性修改
            </summary>
            <param name="devid"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.RemoveAttribute(System.Guid,System.String,IoTSharp.Contracts.DataSide)">
            <summary>
            属性删除
            </summary>
            <param name="deviceId"></param>
            <param name="keyName"></param>
            <param name="dataSide"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetSessionStatus">
            <summary>
            SessionStatus
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetClientStatus">
            <summary>
            SessionStatus
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DictionaryController.Delete(System.Int32)">
             <summary>
            
             </summary>
             <param name="id"></param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DictionaryGroupController.Save(IoTSharp.Data.BaseDictionaryGroup)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DictionaryGroupController.Delete(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DynamicFormInfoController.Save(IoTSharp.Data.DynamicFormInfo)">
             <summary>
            
             </summary>
             <param name="m"></param>
             <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:IoTSharp.Controllers.HealthChecksController.Get" -->
        <member name="T:IoTSharp.Controllers.InstallerController">
            <summary>
            安装
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.InstallerController.Instance">
            <summary>
            检查IoTSharp实例信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.InstallerController.CreateRootCertificate">
            <summary>
            域名可以不配置， 默认会使用机器名  
            </summary>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.MenuController">
            <summary>
            this is test purpose
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.MetricsController.EventBus">
            <summary>
            返回事件总线的统计信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.List(IoTSharp.Controllers.Models.ProduceParam)">
            <summary>
            产品列表
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.ProduceDatas(System.Guid)">
            <summary>
            
            </summary>
            <param name="produceid"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.Get(System.Guid)">
            <summary>
            获取产品
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.Delete(System.Guid)">
            <summary>
            删除产品
            </summary>
            <param name="produceid"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.Save(IoTSharp.Dtos.ProduceAddDto)">
            <summary>
            新增产品
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.Update(IoTSharp.Dtos.ProduceAddDto)">
            <summary>
            修改产品
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.GetProduceData(System.Guid)">
            <summary>
            获取产品属性
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.EditProduceData(IoTSharp.Dtos.ProduceDataEditDto)">
            <summary>
            修改属性
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.GetProduceDictionary(System.Guid)">
            <summary>
            获取产品字典
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.EditProduceDictionary(IoTSharp.Dtos.ProduceDictionaryEditDto)">
            <summary>
            修改字典
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.RulesController.UpdateFlowExpression(IoTSharp.Dtos.UpdateFlowExpression)">
             <summary>
             更新节点的条件表达式
             </summary>
             <returns> </returns>
            
        </member>
        <member name="M:IoTSharp.Controllers.RulesController.Fork(IoTSharp.Data.FlowRule)">
            <summary>
            复制一个规则副本
            </summary>
            <param name="flowRule"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.RulesController.FlowEvents(IoTSharp.Controllers.Models.EventParam)">
             <summary>
            
             </summary>
             <param name="m"></param>
             <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.TenantsController">
            <summary>
            租户管理
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.GetTenant">
            <summary>
            系统管理员用来获取全部租户列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.GetTenant(System.Guid)">
            <summary>
            普通用户用于活的自身的租户信息
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.PutTenant(System.Guid,IoTSharp.Data.Tenant)">
            <summary>
            修改指定的租户信息， 仅限租户管理员
            </summary>
            <param name="id"></param>
            <param name="tenant"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.PostTenant(IoTSharp.Data.Tenant)">
            <summary>
            新增租户， 仅限系统管理员
            </summary>
            <param name="tenant"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.DeleteTenant(System.Guid)">
            <summary>
            删除租户，仅限系统用户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:IoTSharp.Dtos.TokenEntity.access_token">
            <summary>
            token
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TokenEntity.expires_in">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Code">
            <summary>
            登录结果
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.SignIn">
            <summary>
            登录结果
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Succeeded">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Roles">
            <summary>
            用户所具备权限
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginDto.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginDto.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.Email">
            <summary>
            邮箱地址， 也是用户名，一个邮箱只能注册平台的一个客户，如果你在平台有两个租户都有账号，则需要两个邮箱地址。 
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.PhoneNumber">
            <summary>
            电话号码
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.Customer">
            <summary>
            用户隶属客户邮箱地址
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.Password">
            <summary>
            用户名密码
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.Name">
            <summary>
            设备名称
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.DeviceType">
            <summary>
            设备类型
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.Timeout">
            <summary>
            超时时间 秒数 
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.Owner">
            <summary>
            所有者
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.Active">
            <summary>
            是否活动
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.LastActivityDateTime">
            <summary>
            最后活动
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceRuleDto.Name">
            <summary>
            设备名称
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceRuleDto.DeviceType">
            <summary>
            设备类型
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceRuleDto.Timeout">
            <summary>
            超时时间 秒数
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.FlowOperationDto.NodeStatus">
            <summary>
            节点处理状态，0 创建完
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.Email">
            <summary>
            系统管理员用户名
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.CustomerName">
            <summary>
            客户名称
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.Password">
            <summary>
            系统管理员密码
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.TenantName">
            <summary>
            租户姓名
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.TenantEMail">
            <summary>
            租户邮箱
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.CustomerEMail">
            <summary>
            客户邮箱
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.PhoneNumber">
            <summary>
            电话号码
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstanceDto.Version">
            <summary>
            系统版本
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstanceDto.Installed">
            <summary>
            是否被安装
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstanceDto.Domain">
            <summary>
            http://localhost/  
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.Name">
            <summary>
            设备名称
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.Icon">
            <summary>
            ICON file full path 
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.GatewayType">
            <summary>
            网关类型  根据不通网关来处理相关配置
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.GatewayConfiguration">
            <summary>
            网关配置信息， 如果是Unknow 则不使用， 如果是自定义 ，则这里是json字符串。 
            如果是其他对应的网关， 则这里是 对应的配置文件名。 
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.DefaultTimeout">
            <summary>
            超时时间 秒数
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.Tenant">
            <summary>
            租户
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.Customer">
            <summary>
            客户
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.DefaultIdentityType">
            <summary>
            默认认证类型
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.DefaultDeviceType">
            <summary>
            默认设备类型
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.KeyName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.DisplayName">
            <summary>
            字段显示名称
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.Unit">
            <summary>
            单位
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.UnitExpression">
            <summary>
            单位转换表达式
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.UnitConvert">
            <summary>
            
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.KeyDesc">
            <summary>
            字段备注
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.Display">
            <summary>
            是否显示
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.Place0">
            <summary>
            位置名称
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.PlaceOrder0">
            <summary>
            此位置顺序
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.DataType">
            <summary>
            数据类型 
            </summary>
        </member>
        <member name="T:IoTSharp.Dtos.TelemetryDataQueryDto">
            <summary>
            查询历史遥测数据请求结构体
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TelemetryDataQueryDto.keys">
            <summary>
            要获取的键值， 如果为空， 则为全部
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TelemetryDataQueryDto.begin">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TelemetryDataQueryDto.end">
            <summary>
            截止时间， 默认为现在。 
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TelemetryDataQueryDto.every">
            <summary>
            数据截面聚合间隔
            </summary>
            <example>1.03:14:56:166</example>
            <remarks>d.hh:mm:ss:FFF</remarks>
        </member>
        <member name="P:IoTSharp.Dtos.TelemetryDataQueryDto.aggregate">
            <summary>
            数据截面计算方式， 
            </summary>
        </member>
        <member name="F:IoTSharp.Dtos.TimespanConverterNewtonsoft.TimeSpanFormatString">
            <summary>
            Format: Days.Hours:Minutes:Seconds:Milliseconds
            </summary>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JustFill``1(IoTSharp.Data.ApplicationDbContext,Microsoft.AspNetCore.Mvc.ControllerBase,``0)">
            <summary>
            根据用户信息填写表里面的内容
            </summary>
            <typeparam name="T"></typeparam>
            <param name="_context"></param>
            <param name="controller"></param>
            <param name="ak"></param>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JustCustomer``1(Microsoft.EntityFrameworkCore.DbSet{``0},Microsoft.AspNetCore.Mvc.ControllerBase)">
            <summary>
            查询当前客户的数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JustCustomer``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Guid)">
            <summary>
            查询指定客户的数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="_customerId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JustTenant``1(Microsoft.EntityFrameworkCore.DbSet{``0},Microsoft.AspNetCore.Mvc.ControllerBase)">
            <summary>
            查询当前用户所在租户的数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JustTenant``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Guid)">
            <summary>
            查询指定租户的数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="_tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetCustomer(IoTSharp.Data.ApplicationDbContext,System.Guid)">
            <summary>
            获取指定客户信息
            </summary>
            <param name="context"></param>
            <param name="custId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetTenant(IoTSharp.Data.ApplicationDbContext,System.Guid)">
            <summary>
            获取指定的租户信息
            </summary>
            <param name="context"></param>
            <param name="tenId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetEmail(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            获取当前用户的邮箱
            </summary>
            <param name="_user"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            获取当前用户的ID
            </summary>
            <param name="_user"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetTenantId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            获取当前用户的ID
            </summary>
            <param name="_user"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetCustomerId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            获取当前用户的客户ID
            </summary>
            <param name="_user"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.AddJWTSecurity(NSwag.Generation.AspNetCore.AspNetCoreOpenApiDocumentGeneratorSettings)">
            <summary>
            
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JudgeOrCreateNewDevice(IoTSharp.Data.Device,System.String,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            创建网关的子设备。 
            </summary>
            <param name="device">父设备</param>
            <param name="devname">子设备名称</param>
            <param name="_scopeFactor"></param>
            <param name="_logger"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.FlowRuleEngine.FlowRuleProcessor.RunFlowRules(System.Guid,System.Object,System.Guid,IoTSharp.Contracts.FlowRuleRunType,System.String)">
             <summary>
            
             </summary>
             <param name="ruleid"> 规则Id</param>
             <param name="data">数据</param>
             <param name="deviceId">创建者(可以是模拟器(测试)，可以是设备，在EventType中区分一下)</param>
             <param name="type">类型</param>
             <param name="bizId">业务Id(第三方唯一Id，用于取回事件以及记录的标识)</param>
             <returns> 返回所有节点的记录信息，需要保存则保存</returns>
        </member>
        <member name="T:IoTSharp.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.buzzle_template_png">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.Logo">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.ShowHelp">
            <summary>
              查找类似 显示帮助 的本地化字符串。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.slide1_jpg">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.slide2_jpg">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.slide3_jpg">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.slide4_jpg">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.slide5_jpg">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.slide6_jpg">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.slide7_jpg">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.slide8_jpg">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.slide9_jpg">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.TheCertificateIsInstalled">
            <summary>
              查找类似 The certificate is installed 的本地化字符串。
            </summary>
        </member>
        <member name="T:IoTSharp.Services.MQTTControllers.V1GatewayController">
            <summary>
            兼容thingsboard协议
            </summary>
        </member>
    </members>
</doc>
