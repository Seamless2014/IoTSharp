<Project Sdk="Microsoft.NET.Sdk.Web">

	<PropertyGroup>
		<TargetFramework>net6.0</TargetFramework>
		<TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
		<TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
		<IsPackable>false</IsPackable>
		<IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>
		<IsTransformWebConfigDisabled>true</IsTransformWebConfigDisabled>
		<Company>MaiKebing</Company>
		<Product>IoTSharp</Product>
		<Authors>Maikebing</Authors>
		<PackageProjectUrl>https://github.com/IoTSharp/IoTSharp</PackageProjectUrl>
		<RepositoryUrl>https://github.com/IoTSharp/IoTSharp</RepositoryUrl>
		<PackageReleaseNotes>Open-source IoT Platform - Device management, data collection, processing and visualization.   https://www.iotsharp.net</PackageReleaseNotes>
		<Description>Open-source IoT Platform - Device management, data collection, processing and visualization.</Description>
		<PackageId>IoTSharp</PackageId>
		<UserSecretsId>18970590-05bf-4a1f-a70b-3c8a120d12cb</UserSecretsId>
		<Version>3.0.0</Version>
		<RepositoryType>git</RepositoryType>
		<PackageTags>IoT</PackageTags>
		<ApplicationIcon>Resources\Logo.ico</ApplicationIcon>
		<DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
		<DockerComposeProjectPath>..\docker-compose.dcproj</DockerComposeProjectPath>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<IsPackable>true</IsPackable>
		<PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
		<Copyright>Copyright 2018-2022  Yanhong Ma</Copyright>
		<AssemblyVersion>3.0.0.0</AssemblyVersion>
		<FileVersion>3.0.0.0</FileVersion>
		<PackageIcon>96x96.png</PackageIcon>
		<GenerateDocumentationFile>True</GenerateDocumentationFile>

		<RestoreAdditionalProjectSources>
			https://api.nuget.org/v3/index.json;
			https://www.myget.org/F/iotsharp/api/v3/index.json;
		</RestoreAdditionalProjectSources>
		<GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>
		<DocumentationFile>IoTSharp.xml</DocumentationFile>
		<NoWarn>1701;1702;1591</NoWarn>
		<EnforceCodeStyleInBuild>True</EnforceCodeStyleInBuild>
		<Configurations>Debug;Release;Release_VUE;Debug_VUE</Configurations>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)' == 'Debug' OR '$(Configuration)' == 'Release'">
		<SpaRoot>ClientApp\</SpaRoot>
		<SpaProxyServerUrl>http://localhost:44412</SpaProxyServerUrl>
		<SpaProxyLaunchCommand>npm start</SpaProxyLaunchCommand>
		<DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
		<!-- Set this to true if you enable server-side prerendering -->
		<BuildServerSideRenderer>false</BuildServerSideRenderer>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)' == 'Debug_VUE' OR '$(Configuration)' == 'Release_VUE'">
		<SpaRoot>ClientAppVue\</SpaRoot>
		<SpaProxyServerUrl>http://localhost:8080</SpaProxyServerUrl>
		<SpaProxyLaunchCommand>npm run serve</SpaProxyLaunchCommand>
		<DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
		<!-- Set this to true if you enable server-side prerendering -->
		<BuildServerSideRenderer>false</BuildServerSideRenderer>
	</PropertyGroup>
	<ItemGroup>

		<PackageReference Include="AspNetCore.HealthChecks.System" Version="6.0.5" />
		<PackageReference Include="AspNetCore.HealthChecks.UI" Version="6.0.5" />
		<PackageReference Include="AspNetCore.HealthChecks.UI.Client" Version="6.0.5" />

		<PackageReference Include="EasyCaching.InMemory" Version="1.6.1" />
		<PackageReference Include="EasyCaching.LiteDB" Version="1.6.1" />
		<PackageReference Include="EasyCaching.Redis" Version="1.6.1" />
		<PackageReference Include="Figgle" Version="0.4.0" />
		<PackageReference Include="hyjiacan.pinyin4net" Version="4.1.1" />
		<PackageReference Include="IoTSharp.CoAP.NET" Version="2.0.8" />
		<PackageReference Include="Jdenticon-net" Version="3.1.2" />
		<PackageReference Include="Jdenticon.AspNetCore" Version="3.1.2" />
		<PackageReference Include="LiteDB" Version="5.0.12" />

		<PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="6.0.9" />
		<PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="6.0.9" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="6.0.9">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.17.0" />
		<PackageReference Include="MimeMapping" Version="1.0.1.37" />
		<PackageReference Include="MQTTnet" Version="4.1.1.318" />
		<PackageReference Include="MQTTnet.AspNetCore" Version="4.1.1.318" />
		<PackageReference Include="MQTTnet.AspNetCore.Routing" Version="0.4.11" />
		<PackageReference Include="NSwag.AspNetCore" Version="13.17.0" />
		<PackageReference Include="Rin" Version="2.6.0" />
		<PackageReference Include="Rin.Mvc" Version="2.6.0" />
		<PackageReference Include="RulesEngine" Version="4.0.0" />
		<PackageReference Include="SilkierQuartz" Version="5.0.356" />
		<PackageReference Include="SkiaSharp.NativeAssets.Linux.NoDependencies" Version="2.88.3" />
		<PackageReference Include="Storage.Net" Version="9.3.0" />
		<PackageReference Include="ShardingCore" Version="6.7.0.2" />
		<PackageReference Include="System.Text.Encoding.CodePages" Version="6.0.0">

			<TreatAsUsed>true</TreatAsUsed>
		</PackageReference>
		<PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="6.0.9" />
		<PackageReference Include="Microsoft.Extensions.Hosting.WindowsServices" Version="6.0.0" />
		<PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="6.0.9" />
		<PackageReference Include="Microsoft.AspNetCore.Identity.UI" Version="6.0.9" />
	</ItemGroup>

	<ItemGroup Condition="'$(Configuration)' == 'Debug_VUE'  OR '$(Configuration)' == 'Release_VUE'">
		<Compile Remove="ClientApp\**" />
		<Content Remove="ClientApp\**" />
		<EmbeddedResource Remove="ClientApp\**" />
		<None Remove="ClientApp\**" />
	</ItemGroup>
	<ItemGroup Condition="'$(Configuration)' == 'Debug' OR '$(Configuration)' == 'Release'">
		<Folder Include="ClientApp\" />
		<Compile Remove="ClientAppVue\**" />
		<Content Remove="ClientAppVue\**" />
		<EmbeddedResource Remove="ClientAppVue\**" />
		<None Remove="ClientAppVue\**" />
	</ItemGroup>
	<ItemGroup>
		<Compile Remove="Migrations\**" />
		<Compile Remove="Resources\images\**" />
		<Content Remove="Migrations\**" />
		<Content Remove="Resources\images\**" />
		<EmbeddedResource Remove="Migrations\**" />
		<EmbeddedResource Remove="Resources\images\**" />
		<None Remove="Migrations\**" />
		<None Remove="Resources\images\**" />
		<None Remove=".gitignore" />
		<None Remove="ca.crt" />
		<None Remove="ca.key" />
		<None Remove="healthchecksdb" />
		<None Remove="healthchecksdb-shm" />
		<None Remove="health_checks.db" />
		<None Remove="IoTSharp.db" />
		<None Remove="IoTSharp.xml" />
		<None Remove="server.crt" />
		<None Remove="server.key" />
		<None Remove="TelemetryStorage.db" />
		<_WebToolingArtifacts Remove="Properties\PublishProfiles\linux-arm64.pubxml" />
		<_WebToolingArtifacts Remove="Properties\PublishProfiles\linux-x64.pubxml" />
		<_WebToolingArtifacts Remove="Properties\PublishProfiles\osx-x64.pubxml" />
		<_WebToolingArtifacts Remove="Properties\PublishProfiles\registry.hub.docker.com_iotsharp.pubxml" />
		<_WebToolingArtifacts Remove="Properties\PublishProfiles\win7-x64.pubxml" />
		<None Include="..\docs\static\img\96x96.png">
			<Pack>True</Pack>
			<PackagePath></PackagePath>
		</None>
	</ItemGroup>


	<ItemGroup>
		<!-- Don't publish the SPA source files, but do show them in the project files list -->
		<Content Remove="$(SpaRoot)**" />
		<None Remove="$(SpaRoot)**" />
		<None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
	</ItemGroup>

	<Target Name="DebugEnsureNodeEnv_angular" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
		<!-- Ensure Node.js is installed -->
		<Exec Command="node --version" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
		<Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install -g yarn " />
		<Exec WorkingDirectory="$(SpaRoot)" Command="yarn global add @angular/cli" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="yarn install  " />
	</Target>

	<Target Name="PublishRunWebpack_angular" AfterTargets="ComputeFilesToPublish" Condition="'$(Configuration)' == 'Release'">
		<!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install -g yarn " />
		<Exec WorkingDirectory="$(SpaRoot)" Command="yarn global add @angular/cli" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="yarn install  " />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --aot" />
		<!-- Include the newly-built files in the publish output -->
		<ItemGroup>
			<DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
			<ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
				<RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
				<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>


	<Target Name="DebugEnsureNodeEnv_vue" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug_VUE' And !Exists('$(SpaRoot)node_modules') ">
		<!-- Ensure Node.js is installed -->
		<Exec Command="node --version" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
		<Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install -g yarn " />
			<Exec WorkingDirectory="$(SpaRoot)" Command=" yarn add   node-sass@4.12.0 " />
		<Exec WorkingDirectory="$(SpaRoot)" Command="yarn install  " />
	</Target>
	<Target Name="PublishRunWebpack_vue" AfterTargets="ComputeFilesToPublish" Condition=" '$(Configuration)' == 'Release_VUE'">
		<!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install -g yarn " />
		<Exec WorkingDirectory="$(SpaRoot)" Command="yarn add  node-sass " />
		<Exec WorkingDirectory="$(SpaRoot)" Command="yarn install  " />
		<Exec WorkingDirectory="$(SpaRoot)" Command="yarn build" />
		<!-- Include the newly-built files in the publish output -->
		<ItemGroup>
			<DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
			<ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
				<RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
				<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>



	<ItemGroup>
		<Content Include="IoTSharp.xml">
			<CopyToOutputDirectory>Never</CopyToOutputDirectory>
		</Content>
	</ItemGroup>
	<ItemGroup>
		<ProjectReference Include="..\IoTSharp.Contracts\IoTSharp.Contracts.csproj" />
		<ProjectReference Include="..\IoTSharp.Data.Storage\IoTSharp.Data.Cassandra\IoTSharp.Data.Cassandra.csproj" />
		<ProjectReference Include="..\IoTSharp.Data.Storage\IoTSharp.Data.ClickHouse\IoTSharp.Data.ClickHouse.csproj" />
		<ProjectReference Include="..\IoTSharp.Data.Storage\IoTSharp.Data.InMemory\IoTSharp.Data.InMemory.csproj" />
		<ProjectReference Include="..\IoTSharp.Data.Storage\IoTSharp.Data.MySQL\IoTSharp.Data.MySQL.csproj" />
		<ProjectReference Include="..\IoTSharp.Data.Storage\IoTSharp.Data.Oracle\IoTSharp.Data.Oracle.csproj" />
		<ProjectReference Include="..\IoTSharp.Data.Storage\IoTSharp.Data.PostgreSQL\IoTSharp.Data.PostgreSQL.csproj" />
		<ProjectReference Include="..\IoTSharp.Data.Storage\IoTSharp.Data.Sqlite\IoTSharp.Data.Sqlite.csproj" />
		<ProjectReference Include="..\IoTSharp.Data.Storage\IoTSharp.Data.SqlServer\IoTSharp.Data.SqlServer.csproj" />
		<ProjectReference Include="..\IoTSharp.Data.TimeSeries\IoTSharp.Data.TimeSeries.csproj" />
		<ProjectReference Include="..\IoTSharp.Data\IoTSharp.Data.csproj" />
		<ProjectReference Include="..\IoTSharp.EventBus.CAP\IoTSharp.EventBus.CAP.csproj" />
		<ProjectReference Include="..\IoTSharp.EventBus.Shashlik\IoTSharp.EventBus.Shashlik.csproj" />
		<ProjectReference Include="..\IoTSharp.EventBus\IoTSharp.EventBus.csproj" />
		<ProjectReference Include="..\IoTSharp.Extensions.AspNetCore\IoTSharp.Extensions.AspNetCore.csproj" />
		<ProjectReference Include="..\IoTSharp.Extensions.EFCore\IoTSharp.Extensions.EFCore.csproj" />
		<ProjectReference Include="..\IoTSharp.Extensions.X509\IoTSharp.Extensions.X509.csproj" />
		<ProjectReference Include="..\IoTSharp.Extensions\IoTSharp.Extensions.csproj" />
		<ProjectReference Include="..\IoTSharp.Interpreter\IoTSharp.Interpreter.csproj" />
		<ProjectReference Include="..\IoTSharp.TaskActions\IoTSharp.TaskActions.csproj" />
	</ItemGroup>

	<ItemGroup>
		<Compile Update="Properties\Resources.Designer.cs">
			<DesignTime>True</DesignTime>
			<AutoGen>True</AutoGen>
			<DependentUpon>Resources.resx</DependentUpon>
		</Compile>
	</ItemGroup>
	<ItemGroup>
		<EmbeddedResource Update="Properties\Resources.resx">
			<Generator>ResXFileCodeGenerator</Generator>
			<LastGenOutput>Resources.Designer.cs</LastGenOutput>
		</EmbeddedResource>
	</ItemGroup>
	<ProjectExtensions>
		<VisualStudio><UserProperties /></VisualStudio>
	</ProjectExtensions>
</Project>
